// Generated by CoffeeScript 1.4.0
(function() {
  var Config, Identity, LdapServer, Logger, SUFFIX, generate_identity, ldap, ldapRiak, _ref;

  SUFFIX = 'o=example';

  ldap = require('ldapjs');

  ldapRiak = require('ldapjs-riak');

  require('pkginfo')(module, 'name', 'version');

  Config = require('./config');

  Logger = require('./logger');

  _ref = require('./identity'), Identity = _ref.Identity, generate_identity = _ref.generate_identity;

  LdapServer = (function() {

    function LdapServer() {
      var authorize, backend,
        _this = this;
      this.config = Config.get();
      this.logger = Logger.get();
      this.logger.getLogger = function() {
        return this.logger;
      };
      this.identity = Identity.get();
      this.app = ldap.createServer();
      backend = ldapRiak.createBackend({
        bucket: {
          name: "ldapjs_riak"
        },
        uniqueIndexBucket: {
          name: "ldapjs_ldapjs_riak"
        },
        indexes: {
          email: true,
          uuid: true,
          cn: false,
          sn: false
        },
        client: {
          url: "http://localhost:8098",
          clientId: "ldapjs_riak_1",
          retry: {
            retries: 3,
            factor: 2,
            minTimeout: 1000,
            maxTimeout: 10000
          }
        },
        log4js: this.logger
      });
      this.app.bind('cn=root', function(req, res, next) {
        if (req.version !== 3) {
          return next(new ldap.ProtocolError(req.version + ' is not v3'));
        }
        if (req.credentials !== 'secret') {
          return next(new ldap.InvalidCredentialsError(req.dn.toString()));
        }
      });
      authorize = function(req, res, next) {
        var bindDN;
        bindDN = req.connection.ldap.bindDN;
        return next();
        if (req.type === 'BindRequest' || bindDN.parentOf(req.dn) || bindDN.equals(req.dn)) {
          return next();
        }
        return next(new ldap.InsufficientAccessRightsError());
      };
      this.app.add(SUFFIX, backend, authorize, backend.add());
      this.app.modify(SUFFIX, backend, authorize, backend.modify());
      this.app.bind(SUFFIX, backend, authorize, backend.bind());
      this.app.compare(SUFFIX, backend, authorize, backend.compare());
      this.app.del(SUFFIX, backend, authorize, backend.del());
      this.app.search(SUFFIX, backend, authorize, backend.search());
      this.app.listen(1389, function() {
        return _this.logger.info("Ldap server is up at: " + _this.app.url);
      });
    }

    return LdapServer;

  })();

  module.exports = LdapServer;

}).call(this);
